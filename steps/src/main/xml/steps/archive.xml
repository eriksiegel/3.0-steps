<section xmlns="http://docbook.org/ns/docbook" xmlns:p="http://www.w3.org/ns/xproc"
  xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="c.archive">

  <title>p:archive</title>

  <para>The <code>p:archive</code> step outputs on its <port>result</port> port an archive (usually
    binary) document, for instance a ZIP file. A specification of the contents of the archive may be
    specified in a manifest XML document on the <port>manifest</port> port. The step produces a
    report on the <port>report</port>  port, which contains the manifest, amended with additional
    information about the archiving.</para>

  <p:declare-step type="p:archive">
    <p:input port="source" primary="true" content-types="any" sequence="true"/>
    <p:input port="manifest" content-types="application/xml" sequence="true">
      <p:empty/>
    </p:input>
    <p:input port="archive" content-types="any" sequence="true">
      <p:empty/>
    </p:input>
    <p:output port="result" primary="true" content-types="any" sequence="false"/>
    <p:output port="report" content-types="application/xml" sequence="false"/>
    <p:option name="format" as="xs:QName" select="'zip'"/>
    <p:option name="relative-to" as="xs:anyURI?"/>
    <p:option name="parameters" as="map(xs:Qname, item()*)?"/>
  </p:declare-step>

  <para>The <code>p:archive</code> step can perform several different operations on archives. The
    most common one will likely be creating an archive, but it could also, depending on the archive
    format, provide services like update, freshen or even merge. The only format implementations
      <rfc2119>must</rfc2119> support is <biblioref linkend="zip"/>. <impl>The list of formats
      supported by the <tag>p:archive</tag> step is
      <glossterm>implementation-defined</glossterm>.</impl></para>

  <para>The <code>p:archive</code> step has the following input ports:</para>
  <variablelist>
    <varlistentry>
      <term><port>source</port></term>
      <listitem>
        <para>The (primary) <port>source</port> port is used to provide documents to be archived
          (for instance constructed by other steps). How and which of these documents are processed
          is governed by the document(s) appearing on the other input ports and the combination of
          options and parameters. See below for details. <error code="C0084">It is a
              <glossterm>dynamic error</glossterm> if documents appear on the <code>p:archive</code>
            step's <port>source</port> port that have duplicate or no base URI's.</error></para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><port>manifest</port></term>
      <listitem>
        <para>The <port>manifest</port> port can receive a manifest document that tells the step how
          to construct the archive. If no manifest document is provided on this port, a default
          manifest is constructed automatically. See <xref linkend="cv.archive-manifest"/>. 
          <error code="C0100">It is a <glossterm>dynamic error</glossterm> if the document on port
          <port>manifest</port> does not conform to the given schema.</error>
        </para>
        <para><error code="C0112">It is a <glossterm>dynamic error</glossterm> if more than one document
        appears on the port <port>manifest</port>.</error></para>
        <para>The default input for this port is the empty sequence.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><port>archive</port></term>
      <listitem>
        <para>The <port>archive</port> port is used to provide the step with existing archive(s) for
          operations like update, freshen or merge. Handling of ZIP files supports modifying
          archives appearing on the <port>archive</port> port (<xref linkend="cv.archive-zips"/>).
            <impl>The list of archive formats that can be modified by <tag>p:archive</tag> is
              <glossterm>implementation-defined</glossterm>.</impl> For instance an implementation
          that supports archive merging may accept more than one document on the
            <port>archive</port> port. <error code="C0081">It is a <glossterm>dynamic
              error</glossterm> if the format of the archive does not match the format as specified 
              in <option>format</option> option.</error></para>
        <para>The default input for this port is the empty sequence.</para>
      </listitem>
    </varlistentry>
  </variablelist>

  <para>The <code>p:archive</code> step has the following output ports:</para>
  <variablelist>
    <varlistentry>
      <term><port>result</port></term>
      <listitem>
        <para>The (primary) <port>result</port> port will output the resulting archive.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><port>report</port></term>
      <listitem>
        <para>The <port>report</port> port will output a report about the archiving operation. This
          will be the same as the manifest (as provided on the <port>manifest</port> port or
          automatically created if there was no manifest provided), optionally amended with
          additional attributes and/or elements. <impl>The semantics of any additional attributes,
            elements and their values are
          <glossterm>implementation-defined</glossterm>.</impl></para>
      </listitem>
    </varlistentry>
  </variablelist>

  <para>The <code>p:archive</code> step has the following options:</para>
  <variablelist>
    <varlistentry>
      <term><option>format</option></term>
      <listitem>
        <para>The format of the archive can be specified using the <option>format</option> option.
          Implementations <rfc2119>must</rfc2119> support the <biblioref linkend="zip"/> format,
          specified with the value <code>zip</code>. <impl>It is
              <glossterm>implementation-defined</glossterm> what other formats are
          supported.</impl></para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><option>parameters</option></term>
      <listitem>
        <para>The <option>parameters</option> option can be used to supply parameters to control the
          archiving. <impl>The semantics of the keys and the allowed values for these keys are
              <glossterm>implementation-defined</glossterm>.</impl>
          <error code="C0079">It is a <glossterm>dynamic error</glossterm> if the map
              <option>parameters</option> contains an entry whose key is defined by the
            implementation and whose value is not valid for that key.</error></para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><option>relative-to</option></term>
      <listitem>
        <para>The <option>relative-to</option> option is used in creating a manifest when no
          manifest is provided on the <port>manifest</port> port. See <xref
            linkend="cv.archive-manifest"/>. The value provided for the <option>relative-to</option>
          option will before use always be normalized using the <function>p:urify()</function>
          function. After this normalization its value <rfc2119>must</rfc2119> be an absolute URI.
        </para>
      </listitem>
    </varlistentry>
  </variablelist>
  
  <para>The format of the archive is determined as follows:</para>
  <itemizedlist>
    <listitem>
      <para>If the <option>format</option> option is specified, this determines the format of the
        archive. Implementations <rfc2119>must</rfc2119> support the <biblioref linkend="zip"/>
        format, specified with the value <code>zip</code>. <impl>It is
          <glossterm>implementation-defined</glossterm> what other formats are
          supported.</impl> <error code="C0081">It is a <glossterm>dynamic error</glossterm> if the format of the
            archive does not match the format as specified in the <option>format</option>
            option.</error></para>
    </listitem>
    <listitem>
      <para>If no <option>format</option> option is specified or if its value is the empty sequence,
        the archive's format will be determined by the step, using the <code>content-type</code>
        document-property of the document on the <port>archive</port> port and/or by inspecting its
        contents. <impl>It is <glossterm>implementation-defined</glossterm> how the step determines
          the archive's format.</impl> Implementations <rfc2119>should</rfc2119> recognize archives
        in <biblioref linkend="zip"/> format. </para>
    </listitem>
  </itemizedlist>
  
  <para><error code="C0085">It is a <glossterm>dynamic error</glossterm> if the format of the
    archive cannot be understood, determined and/or processed.</error></para>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

  <section xml:id="cv.archive-manifest">
    <title>The archive manifest</title>

    <para>An archive manifest specifies what must be archived and how. It is represented by a
        <tag>c:archive</tag> root element:</para>

    <e:rng-pattern name="VocabArchive" xml:id="cv.archive"/>

    <para><impl>The <code>c:archive</code> root element may contain additional
          <glossterm>implementation-defined</glossterm> attributes.</impl></para>

    <para>All entries in the archive must be present as <tag>c:entry</tag> child elements:</para>

    <e:rng-pattern name="VocabEntry" xml:id="cv.entry"/>

    <itemizedlist>
      <listitem>
        <para>The <code>name</code> attribute specifies the name of the entry in the archive. It
            <rfc2119>must</rfc2119> be specified as a relative path.</para>
      </listitem>
      <listitem>
        <para>The <code>href</code> attribute will before use always be normalized by the
            <function>p:urify()</function> function. It is interpreted as follows:</para>
        <itemizedlist>
          <listitem>
            <para>The <code>p:archive</code> step checks the documents appearing on its
                <port>source</port> port for any documents with exactly the same base URI as the
              value of the normalized <code>href</code> attribute. If any such document is found,
              this is used as entry for the archive. To store these documents in the archive they
              must be serialized. The <code>serialization</code> document property can be used to
              provide serialization properties.</para>
          </listitem>
          <listitem>
            <para>If the above doesn't apply, the value of the normalized <code>href</code>
              attribute is interpreted as a URI and the document is loaded from this location.
                <error code="D0011">It is a <glossterm>dynamic error</glossterm> if the resource
                referenced by the <option>href</option> option does not exist, cannot be accessed or
                is not a file.</error> If the <option>href</option> option is relative, it is made
              absolute against the base URI of the manifest. These documents are stored in the
              archive "as is". No parsing/serialization takes place.</para>
          </listitem>

        </itemizedlist>
      </listitem>
      <listitem>
        <para>The <code>method</code> attribute specifies how the entry should be compressed.
            <impl>The default compression method is <glossterm>implementation-defined</glossterm>.
          </impl>Implementations <rfc2119>must</rfc2119> support no compression, specified with the
          value <code>none</code>. <impl>It is <glossterm>implementation-defined</glossterm> what
            other compression methods are supported.</impl></para>
      </listitem>
      <listitem>
        <para>The <code>level</code> attribute specifies the level of compression. <impl>The default
            compression method is <glossterm>implementation-defined</glossterm>. </impl>
          <impl>It is <glossterm>implementation-defined</glossterm> what compression levels are
            supported.</impl></para>
      </listitem>
    </itemizedlist>

    <para>The <code>p:archive</code> step <rfc2119>should</rfc2119> strive to retain the order of
      the <tag>c:entry</tag> elements when constructing the archive. For instance, an e-book in EPUB
      format has a non-compressed entry that must be first in the archive. It should be possible to
      construct such an archive using <code>p:archive</code>.</para>

    <para><impl>The <code>c:entry</code> elements may contain additional
          <glossterm>implementation-defined</glossterm> attributes.</impl></para>

    <para>If no manifest entry is provided for a document appearing on the <port>source</port> port,
      the step will manufacture a manifest entry from the document’s <code>base-uri</code> property.
      If no document arrives on the <port>manifest</port> port, it will create a complete manifest
      document.</para>
    <para>The option <option>relative-to</option> can be used to derive the entry’s <tag
        role="attribute">name</tag> attribute from the <port>source</port> document’s
        <code>base-uri</code> property, which in turn will be used for the entry’s <tag
        role="attribute">href</tag> attribute. The step will remove the leading (normalized)
        <option>relative-to</option> option's value from the <port>source</port> document’s
      (normalized) base URI. If there is no match, the manifest entry’s <tag role="attribute"
        >name</tag> attribute will consist of the path part of the <port>source</port> document’s
      base URI, without any leading protocol specifier and slashes.</para>
  </section>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

  <section xml:id="cv.archive-zips">
    <title>Handling of ZIP archives</title>

    <para>The format of the archive can be specified using the <option>format</option> option.
      Implementations <rfc2119>must</rfc2119> support the <biblioref linkend="zip"/> format,
      specified with the value <code>zip</code>. </para>

    <para>The <option>parameters</option> option can be used to supply parameters to control the
      archiving. For the <code>zip</code> format, the following parameters <rfc2119>must</rfc2119>
      be supported:</para>

    <variablelist>
      <varlistentry>
        <term><code>command</code></term>
        <listitem>
          <para>Specifies what operation to perform. If not specified, its default value is
              <code>update</code>. Possible values are:</para>
          <variablelist>
            <varlistentry>
              <term><code>update</code></term>
              <listitem>
                <para>When the <code>command</code> parameter is set to <code>update</code> or not
                  specified, zero or exactly one document in ZIP format can appear on the
                    <port>archive</port> port. If there is no document on the <port>archive</port>
                  port, an empty ZIP archive is assumed.</para>
                <para>The contents of the manifest (either provided or (partially) constructed, see
                    <xref linkend="cv.archive-manifest"/>) is held against the entries in the ZIP
                  file provided on the <port>archive</port> port: </para>
                <itemizedlist>
                  <listitem>
                    <para>Any entry in the manifest that does not exist in the ZIP file provided on
                      the <port>archive</port> port is added.</para>
                  </listitem>
                  <listitem>
                    <para>For any entry that does exist in the ZIP file provided on the
                        <port>archive</port> port, a timestamp compare is done. When the entry in
                      the manifest is newer than the entry in the ZIP file provided on the
                        <port>archive</port> port, it is replaced. Documents that are either
                      specified in the manifest or come from the <port>source</port> port have no
                      timestamp and will <emphasis>always</emphasis> cause a replace to be
                      done.</para>
                  </listitem>
                </itemizedlist>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term><code>create</code></term>
              <listitem>
                <para>When the <code>command</code> parameter is set to <code>create</code>, the
                    <code>p:archive</code> step will behave exactly as for <code>update</code>,
                  except that existing entries will <emphasis>always</emphasis> be updated,
                  regardless of their timestamp.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term><code>freshen</code></term>
              <listitem>
                <para>When the <code>command</code> parameter is set to <code>freshen</code>, the
                    <code>p:archive</code> step will behave exactly as for <code>update</code>,
                  except that no new entries will be added. Any entries in the manifest that do not
                  match an entry in the archive are ignored.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term><code>delete</code></term>
              <listitem>
                <para>When the <code>command</code> parameter is set to <code>delete</code>, exactly
                  one document in ZIP format must appear on the <port>archive</port> port. The
                  contents of the manifest (either provided or (partially) constructed, see <xref
                    linkend="cv.archive-manifest"/>) is held against the entries in the ZIP file
                  provided on the <port>archive</port> port. Any entries in the manifest file that
                  match an entry in the ZIP archive will be deleted. All other entries in the
                  manifest are ignored.</para>
              </listitem>
            </varlistentry>
          </variablelist>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><code>level</code></term>
        <listitem>
          <para>Specifies the default compression level for files added to or updated in the
            archive. It can be overruled on a per-entry basis with a <code>c:entry/@level</code>
            attribute in the manifest. Values that must be supported for ZIP files are:
              “<code>smallest</code>” | “<code>fastest</code>” | “<code>default</code>” |
              “<code>huffman</code>” | “<code>none</code>”.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><code>method</code></term>
        <listitem>
          <para>Specifies the default compression method for files added to or updated in the
            archive. It can be overruled on a per-entry basis with a <code>c:entry/@method</code>
            attribute in the manifest. Values that must be supported for ZIP files are:
              “<code>none</code>” | “<code>deflated</code>”.</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <para><error code="C0080">It is a <glossterm>dynamic error</glossterm> if the number of
        documents on the <port>archive</port> does not match the expected number of archive input
        documents for the given <code>format</code> and <code>command</code>.</error></para>

    <para>Implementations of other archive formats <rfc2119>should</rfc2119> use the same parameter
      names if applicable. The value spaces for these parameters may be format-specific though.
        <impl>The actual parameter names supported by <tag>p:archive</tag> for a particular format
        are <glossterm>implementation-defined</glossterm>.</impl></para>

  </section>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

  <simplesect>
    <title>Document properties</title>
    <para feature="archive-preserves-none">No document properties are preserved.</para>
  </simplesect>

</section>
